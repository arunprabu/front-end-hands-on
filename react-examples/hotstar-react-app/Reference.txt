A new concept was introduced in React 16.8 - Hooks. 
They let you use state and other React features without writing a class.
Many of the features available to classes - such as lifecycle methods and states - 
were not available to functional components. 
The hooks introduced in react adds all that functionality and more.

Life Cycle Hooks and React Hooks are not same. 

This feature has loads of cools things to even replace redux .
In this example, let's build a few things just by using hooks, 
a potential alternative to redux.

Hooks enable a functional component to have state in it.
This is also called as Hook state. 

Example: 
  within a fn comp, 

  import {useState } from 'react';

  //this is a data in a variable.. not a state.
  const myProfile = {
    name: 'Arun',
    city: 'Chennai'
  }

  // to have state inside fn comp, we can use useState() . 
  // this will take in data and return getter and setter in an array. 
  // We can do array destructuring to capture both.
  const [profile, setProfile] = useState(myProfile);

  const [age, setAge] = useState(20); // valid -- can create multiple

  // then, we can log 
  console.log(profile);

  const updateProfile = () => {
    setProfile({
      name: 'VJ',
      city: 'Chennai'
    });
    console.log(profile);
  }

  And have a button in JSX to call updateProfile method.
    <button type='button' onClick={updateProfile}>Update Profile</button>

  
===

Rules of Hooks
---------------
Hooks are JavaScript functions, but they impose two additional rules:

Only call Hooks at the top level. 
Don’t call Hooks inside loops, conditions, or nested functions.
Only call Hooks from React functional components. 
Don’t call Hooks from regular JavaScript functions. 
(There is just one other valid place to call Hooks — your own custom Hooks.)

=======================

useState() Hook 
---

useEffect() - Hook 
  is what componentDidMount and componentDidUpdate to class comp 
  will get executed after render cycle 
  useEffect( () => {
    console.log('test');
  })



useCallback()
Hook prevents the child component rendering if the dependency is not changed at all 
For more refer: https://kentcdodds.com/blog/usememo-and-usecallback
Important one for performance optimization

---
useContext()
Let's us share data across components 

Step 1: create context with any data or even null inside 
Refer: PageContext.js 

Step 2: Provide the data to the list of components you want to share 
Check App.js 

Step 3: Using <PageContext.Provider> to share the data across the few components 

Step 4: Consume it in both Home.js and About.js 


======
Unit Testing
----

Jest for running unit tests;
React Testing Library for unit test assertions;
Cypress for running E2E tests;

Using Jest
---
  Test in app component 
  Test a private function in some other component (Not recommended - But needed for understanding)
  Test whether the comp rendered properly 
  should display the prop correctly
  should have the right placeholder in input
  Test the texts (should have some text inside some tags)
  should update onChange event in input

  Snapshot Testing 

  
Refer: https://github.com/arunprabu/react-hooks-demo/blob/master/src/components/About/Company/Company.test.js

Also Refer: https://github.com/leighhalliday/mock-fetch-jest-demo/blob/master/src/utils/currency.test.js

Non deterministic tests: https://typeofnan.dev/using-jest-mocks-to-prevent-nondeterministic-changing-snapshot-diffs/

Enzyme Refer: https://github.com/arunprabu/react-course/blob/master/jest-app/src/Header/Header.test.js

Enzyme is intended for unit/integration testing. 
Its API was designed to test the implementation. 
It offers custom renderer that doesn't require DOM (for shallow rendering), 
behaves differently from React renderer and allows things that are important 
for unit testing but aren't possible or straightforward with default renderer, 
like synchronous state updates, shallow rendering, disabling lifecycle methods, etc.

react-testing-library is intended for blackbox integration/e2e tests. 
It uses React renderer and ReactTestUtils internally, 
requires real DOM because it's component's output that is asserted in tests, 
not internals. It doesn't provide facilities for isolated unit tests but it's 
possible to do this by mocking modules that contain component that need to be 
spied, mocked or stubbed by other means, notably jest.mock.



